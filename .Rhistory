y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = "Betas",
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),  # Centralizar o título
panel.border = element_blank(),          # Remover a borda do gráfico
axis.line = element_line(color = "black"))  # Linha do eixo preto
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = beta[1],
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),  # Centralizar o título
panel.border = element_blank(),          # Remover a borda do gráfico
axis.line = element_line(color = "black"))  # Linha do eixo preto
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = ~beta[1],
y = "Density") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),  # Centralizar o título
panel.border = element_blank(),          # Remover a borda do gráfico
axis.line = element_line(color = "black"))  # Linha do eixo preto
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
if (!require(ggplot2)) install.packages("ggplot2")
if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas, c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# ------------
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
# if (!require(ggplot2)) install.packages("ggplot2")
# if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.95))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
betas
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 5, length = 100)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(-1, 5, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.95))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# ------------
# Instalar e carregar os pacotes necessários (se ainda não estiverem instalados)
# if (!require(ggplot2)) install.packages("ggplot2")
# if (!require(truncnorm)) install.packages("truncnorm")
library(ggplot2)
library(truncnorm)
# Definir os parâmetros da distribuição normal truncada
mean1 <- 1.5
sd <- 1
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.05, 0.55))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.03, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
# Criar uma sequência de valores para o eixo x (de 0 em diante, pois é truncada)
betas <- seq(0, 6, length = 100)
q <- quantile(betas[betas>0], c(0.02, 0.60))
# Calcular as densidades das distribuições normais truncadas para cada valor de x
y1 <- dtruncnorm(betas, a = 0, mean = mean1, sd = sd)
df <- data.frame(betas, y1)
# Plotar usando ggplot2
ggplot(df, aes(x = betas, y = y1)) +
# Preencher a área sob a curva com uma cor azul suave
geom_area(fill = rgb(0, 0, 1, alpha = 0.2)) +
# Adicionar a curva de densidade com linha cinza
geom_line(color = "gray", size = 1) +
# Adicionar as linhas verticais para os quantis
geom_vline(xintercept = q, color = "#228b22", linetype = "dashed") +
# Adicionar a linha vertical para a média
geom_vline(xintercept = mean1, color = "#4a90e2") +
# Títulos e rótulos
labs(title = expression("Full-conditional of " ~ beta[1]),
x = expression(beta[1]),
y = "Density") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),   # Centralizar o título
panel.border = element_blank(),           # Remover a borda do gráfico
axis.line = element_line(color = "black"), # Linha do eixo preto
panel.grid = element_blank()              # Remover as linhas de grade
)
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(kableExtra)
kable(
data.frame(
Size = c("500", "252", "180", "120", "90", "60", "Total"),
# Beta = 0.50
B50_FP = c(73, 36, 70, 71, 52, 0, 302),
B50_CR = c(43, 17, 70, 70, 35, 0, 235),
B50_Prop = c(0.59, 0.47, 1.00, 0.99, 0.67, "-", 0.78),
# Beta = 0.75
B75_FP = c(73, 36, 70, 72, 34, 2, 287),
B75_CR = c(44, 19, 70, 72, 17, 1, 223),
B75_Prop = c(0.60, 0.53, 1.00, 1.00, 0.50, 0.50, 0.78),
# Beta = 1.00
B100_FP = c(76, 33, 70, 72, 68, 0, 319),
B100_CR = c(43, 16, 70, 72, 17, 0, 218),
B100_Prop = c(0.57, 0.48, 1.00, 1.00, 0.25, "-", 0.68),
# Beta = 1.25
B125_FP = c(71, 37, 70, 71, 37, 1, 287),
B125_CR = c(41, 20, 70, 70, 18, 0, 219),
B125_Prop = c(0.58, 0.54, 1.00, 0.99, 0.49, 0.00, 0.76),
# Beta = 1.50
B150_FP = c(75, 35, 72, 71, 17, 0, 270),
B150_CR = c(45, 17, 72, 70, 0, 0, 204),
B150_Prop = c(0.60, 0.49, 1.00, 0.99, 0.00, "-", 0.76),
# Overall Totals
Total_FP = c(368, 177, 352, 357, 208, 3, 1465),
Total_CR = c(216, 89, 352, 354, 87, 1, 1099),
Total_Prop = c(0.587, 0.503, 1.00, 0.99, 0.418, 0.33, 0.75)
),
caption = "Performance of the Bayesian method in correctly rejecting false positives across different time series sizes and $\\beta_1$ values. The table summarizes the number of false positives correctly rejected, the total number of false positive indications in the cointegration method, and the proportion of correct rejections for each combination of size and $\\beta_1$ tested.",
align = c("l", rep("r", 21)),
booktabs = TRUE,
escape = FALSE
) %>%
kable_styling(font_size = 9, latex_options = "scale_down") %>%
add_header_above(c(" " = 1,
"$\\beta_1 = 0.50$" = 3,
"$\\beta_1 = 0.75$" = 3,
"$\\beta_1 = 1.00$" = 3,
"$\\beta_1 = 1.25$" = 3,
"$\\beta_1 = 1.50$" = 3,
"Overall Totals" = 3), escape = FALSE) %>%
add_header_above(c(" " = 1, "Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1)) %>%
column_spec(1, bold = TRUE) %>%
row_spec(seq(0, nrow(.), by = 5), background = "#f7f7f7") %>%  # Destaca a cada 5 linhas
pack_rows("$\\beta_1 = 0.50$", 1, 1, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 0.75$", 2, 2, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.00$", 3, 3, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.25$", 4, 4, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.50$", 5, 5, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("Overall Totals", 6, 7, label_row_css = "background-color: #e6e6e6;")
library(kableExtra)
# Criando os dados da tabela
df <- data.frame(
Size = c("500", "252", "180", "120", "90", "60", "Total"),
# Beta = 0.50
B50_FP = c(73, 36, 70, 71, 52, 0, 302),
B50_CR = c(43, 17, 70, 70, 35, 0, 235),
B50_Prop = c(0.59, 0.47, 1.00, 0.99, 0.67, "-", 0.78),
# Beta = 0.75
B75_FP = c(73, 36, 70, 72, 34, 2, 287),
B75_CR = c(44, 19, 70, 72, 17, 1, 223),
B75_Prop = c(0.60, 0.53, 1.00, 1.00, 0.50, 0.50, 0.78),
# Beta = 1.00
B100_FP = c(76, 33, 70, 72, 68, 0, 319),
B100_CR = c(43, 16, 70, 72, 17, 0, 218),
B100_Prop = c(0.57, 0.48, 1.00, 1.00, 0.25, "-", 0.68),
# Beta = 1.25
B125_FP = c(71, 37, 70, 71, 37, 1, 287),
B125_CR = c(41, 20, 70, 70, 18, 0, 219),
B125_Prop = c(0.58, 0.54, 1.00, 0.99, 0.49, 0.00, 0.76),
# Beta = 1.50
B150_FP = c(75, 35, 72, 71, 17, 0, 270),
B150_CR = c(45, 17, 72, 70, 0, 0, 204),
B150_Prop = c(0.60, 0.49, 1.00, 0.99, 0.00, "-", 0.76),
# Overall Totals
Total_FP = c(368, 177, 352, 357, 208, 3, 1465),
Total_CR = c(216, 89, 352, 354, 87, 1, 1099),
Total_Prop = c(0.587, 0.503, 1.00, 0.99, 0.418, 0.33, 0.75)
)
# Definindo as linhas para destacar (a cada 5)
highlight_rows <- c(5)  # Apenas a linha 5 neste caso, já que temos apenas 7 linhas
# Criando a tabela kable com expressões LaTeX
kable(
df,
caption = "Performance of the Bayesian method in correctly rejecting false positives across different time series sizes and $\\beta_1$ values. The table summarizes the number of false positives correctly rejected, the total number of false positive indications in the cointegration method, and the proportion of correct rejections for each combination of size and $\\beta_1$ tested.",
align = c("l", rep("r", 21)),
booktabs = TRUE,
escape = FALSE
) %>%
kable_styling(font_size = 9, latex_options = "scale_down") %>%
add_header_above(c(" " = 1,
"$\\beta_1 = 0.50$" = 3,
"$\\beta_1 = 0.75$" = 3,
"$\\beta_1 = 1.00$" = 3,
"$\\beta_1 = 1.25$" = 3,
"$\\beta_1 = 1.50$" = 3,
"Overall Totals" = 3), escape = FALSE) %>%
add_header_above(c(" " = 1, "Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1)) %>%
column_spec(1, bold = TRUE) %>%
row_spec(highlight_rows, background = "#f7f7f7") %>%  # Destaca apenas a linha 5
pack_rows("$\\beta_1 = 0.50$", 1, 1, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 0.75$", 2, 2, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.00$", 3, 3, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.25$", 4, 4, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.50$", 5, 5, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("Overall Totals", 6, 7, label_row_css = "background-color: #e6e6e6;")
library(kableExtra)
# Criando os dados da tabela
df <- data.frame(
Size = c("500", "252", "180", "120", "90", "60", "Total"),
# Beta = 0.50
B50_FP = c(73, 36, 70, 71, 52, 0, 302),
B50_CR = c(43, 17, 70, 70, 35, 0, 235),
B50_Prop = c(0.59, 0.47, 1.00, 0.99, 0.67, "-", 0.78),
# Beta = 0.75
B75_FP = c(73, 36, 70, 72, 34, 2, 287),
B75_CR = c(44, 19, 70, 72, 17, 1, 223),
B75_Prop = c(0.60, 0.53, 1.00, 1.00, 0.50, 0.50, 0.78),
# Beta = 1.00
B100_FP = c(76, 33, 70, 72, 68, 0, 319),
B100_CR = c(43, 16, 70, 72, 17, 0, 218),
B100_Prop = c(0.57, 0.48, 1.00, 1.00, 0.25, "-", 0.68),
# Beta = 1.25
B125_FP = c(71, 37, 70, 71, 37, 1, 287),
B125_CR = c(41, 20, 70, 70, 18, 0, 219),
B125_Prop = c(0.58, 0.54, 1.00, 0.99, 0.49, 0.00, 0.76),
# Beta = 1.50
B150_FP = c(75, 35, 72, 71, 17, 0, 270),
B150_CR = c(45, 17, 72, 70, 0, 0, 204),
B150_Prop = c(0.60, 0.49, 1.00, 0.99, 0.00, "-", 0.76),
# Overall Totals
Total_FP = c(368, 177, 352, 357, 208, 3, 1465),
Total_CR = c(216, 89, 352, 354, 87, 1, 1099),
Total_Prop = c(0.587, 0.503, 1.00, 0.99, 0.418, 0.33, 0.75)
)
# Definindo as linhas para destacar (a cada 5)
highlight_rows <- c(5)  # Apenas a linha 5 neste caso, já que temos apenas 7 linhas
# Definindo as linhas para destacar (a cada 5)
highlight_rows <- c(5)  # Apenas a linha 5 neste caso, já que temos apenas 7 linhas
# Criando a tabela kable com expressões LaTeX
kable(
df,
caption = "Performance of the Bayesian method in correctly rejecting false positives",
align = c("l", rep("r", 21)),
booktabs = TRUE,
escape = FALSE
) %>%
kable_styling(font_size = 9, latex_options = "scale_down") %>%
add_header_above(c(" " = 1,
"$\\beta_1 = 0.50$" = 3,
"$\\beta_1 = 0.75$" = 3,
"$\\beta_1 = 1.00$" = 3,
"$\\beta_1 = 1.25$" = 3,
"$\\beta_1 = 1.50$" = 3,
"Overall Totals" = 3), escape = FALSE) %>%
add_header_above(c(" " = 1, "Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1,
"Coint. FP" = 1, "Corr. Rej." = 1, "Prop." = 1)) %>%
column_spec(1, bold = TRUE) %>%
row_spec(highlight_rows, background = "#f7f7f7") %>%  # Destaca apenas a linha 5
pack_rows("$\\beta_1 = 0.50$", 1, 1, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 0.75$", 2, 2, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.00$", 3, 3, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.25$", 4, 4, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("$\\beta_1 = 1.50$", 5, 5, label_row_css = "background-color: #e6e6e6;", escape = FALSE) %>%
pack_rows("Overall Totals", 6, 7, label_row_css = "background-color: #e6e6e6;")
library(knitr)
library(kableExtra)
# Criando o dataframe com os dados
tabela <- data.frame(
Beta1 = c(rep(0.50, 3), rep(0.75, 3), rep(1.00, 3), rep(1.25, 3), rep(1.50, 3), rep("Overall", 3)),
Metric = rep(c("Cointegration False Positives", "Correctly Rejected", "Proportion"), 6),
`500` = c(73,43,0.59, 73,44,0.60, 76,43,0.57, 71,41,0.58, 75,45,0.60, 368,216,0.587),
`252` = c(36,17,0.47, 36,19,0.53, 33,16,0.48, 37,20,0.54, 35,17,0.49, 177,89,0.503),
`180` = c(70,70,1.00, 70,70,1.00, 70,70,1.00, 70,70,1.00, 72,72,1.00, 352,352,1.00),
`120` = c(71,70,0.99, 72,72,1.00, 72,72,1.00, 71,70,0.99, 71,70,0.99, 357,354,0.99),
`90`  = c(52,35,0.67, 34,17,0.50, 68,17,0.25, 37,18,0.49, 17,0,0.00, 208,87,0.418),
`60`  = c(0,0,"-", 2,1,0.50, 0,0,"-", 1,0,0.00, 0,0,"-", 3,1,0.33),
Total = c(302,235,0.78, 287,223,0.78, 319,218,0.68, 287,219,0.76, 270,204,0.76, 1465,1099,0.75)
)
# Gerando a tabela kable
tabela %>%
kable("latex", booktabs = TRUE, caption = "Performance of the Bayesian method in correctly rejecting false positives.") %>%
kable_styling(latex_options = c("hold_position", "scale_down")) %>%
pack_rows("$\\beta_1 = 0.50$", 1, 3) %>%
pack_rows("$\\beta_1 = 0.75$", 4, 6) %>%
pack_rows("$\\beta_1 = 1.00$", 7, 9) %>%
pack_rows("$\\beta_1 = 1.25$", 10, 12) %>%
pack_rows("$\\beta_1 = 1.50$", 13, 15) %>%
pack_rows("Overall Totals", 16, 18)
install.packages("xaringan")
install.packages("xaringan")
install.packages("rmarkdown")
install.packages("rmarkdown")
